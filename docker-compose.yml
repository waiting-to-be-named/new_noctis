version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: noctis_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-noctis_db}
      POSTGRES_USER: ${DB_USER:-noctis_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_here}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-noctis_user} -d ${DB_NAME:-noctis_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - noctis_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: noctis_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - noctis_network

  # Django Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noctis_web
    restart: unless-stopped
    environment:
      # Database settings
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: ${DB_NAME:-noctis_db}
      DB_USER: ${DB_USER:-noctis_user}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_here}
      DB_HOST: db
      DB_PORT: 5432
      # Redis settings
      REDIS_URL: redis://redis:6379/1
      # Django settings
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-your-secret-key-here-change-in-production}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-False}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,noctis.local}
      # Email settings
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER:-}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD:-}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-True}
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
      - dicom_storage:/app/media/dicom_files
    ports:
      - "8000:8000"
      - "11112:11112"  # DICOM SCP port
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - noctis_network
    command: /bin/bash -c "python manage.py migrate && python manage.py collectstatic --noinput && supervisord -c /etc/supervisor/conf.d/supervisord.conf"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: noctis_nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./staticfiles:/usr/share/nginx/html/static:ro
      - ./media:/usr/share/nginx/html/media:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - noctis_network

  # Celery Worker (for async tasks)
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noctis_celery_worker
    restart: unless-stopped
    environment:
      # Copy all environment variables from web service
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: ${DB_NAME:-noctis_db}
      DB_USER: ${DB_USER:-noctis_user}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_here}
      DB_HOST: db
      DB_PORT: 5432
      REDIS_URL: redis://redis:6379/1
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-your-secret-key-here-change-in-production}
    volumes:
      - ./media:/app/media
      - dicom_storage:/app/media/dicom_files
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - noctis_network
    command: celery -A noctisview worker -l info --concurrency=4

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: noctis_celery_beat
    restart: unless-stopped
    environment:
      # Copy all environment variables from web service
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: ${DB_NAME:-noctis_db}
      DB_USER: ${DB_USER:-noctis_user}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_here}
      DB_HOST: db
      DB_PORT: 5432
      REDIS_URL: redis://redis:6379/1
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-your-secret-key-here-change-in-production}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - noctis_network
    command: celery -A noctisview beat -l info

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: noctis_backup
    restart: unless-stopped
    environment:
      PGPASSWORD: ${DB_PASSWORD:-secure_password_here}
    volumes:
      - ./backups:/backups
      - ./docker/backup.sh:/backup.sh:ro
    depends_on:
      - db
    networks:
      - noctis_network
    entrypoint: ["/bin/sh", "-c"]
    command: ["chmod +x /backup.sh && crond -f -l 2"]

networks:
  noctis_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  dicom_storage:
    driver: local
  nginx_logs:
    driver: local